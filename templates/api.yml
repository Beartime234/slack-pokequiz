AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Deploys a slack bot. This is a template for building a simple slack bot that uses AWS lambda.

Parameters:
  ServiceName:
    Description: The name of the service that you are deploying
    Type: String
    Default: SlackBot
  SecretsName:
    Description: The name  of the secret in secrets manager where you are storing your secrets
    Type: String
  Stage:
    Description: The Stage/Environment you are building in.
    Type: String
    Default: dev
    AllowedValues:
    - local-dev
    - dev
    - test
    - prod

Globals:
  Function:
    Runtime: python3.6
    Timeout: 10
    MemorySize: 1024
    Environment:
      Variables:
        STAGE:
          Ref: Stage
        SECRETS_NAME:
          Ref: SecretsName
        QUIZ_STORAGE_TABLE:
          Fn::ImportValue:
            Fn::Sub:
              ${Stage}-quizdata-storage
        QUIZ_ID:
          Ref: ServiceName
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowOrigin: "'slack.com', 'pokequiz.xyz'"

Resources:
  # Because stages are just not designed well we deploy a new API per stage
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Fn::Sub: ${ServiceName} - ${Stage}
        schemes:
        - https
        consumes:
        - application/json
        produces:
        - application/json
        basePath: /v1
        paths:
          /slack/events:
            post:
              summary: |
                Slack events api resource
              description:
                Fn::Sub: |
                  Slack events api resource. This is where you point the slack endpoint for ${ServiceName} to receive @ events.
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventsApiLambdaFunction.Arn}/invocations
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
              responses:
                '200':
                  description: |
                    Request Received Okay!
          /slack/interactive:
            post:
              summary: |
                Interactive Quiz URL
              description:
                Fn::Sub: |
                  Slack intereactive api resource. This is where you point the slack endpoint for ${ServiceName} to receive interactive events.
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InteractiveApiLambdaFunction.Arn}/invocations
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
              responses:
                '200':
                  description: |
                    Request Received Okay!
          /slack/oauth:
            get:
              summary: |
                Oauth request URL
              description:
                Fn::Sub: |
                  Slack Oauth request url. This is used to authenticate with the application to allow users to add it to slack.
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OauthApiLambdaFunction.Arn}/invocations
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
              responses:
                '200':
                  description: |
                    Request Received Okay!
      StageName:
        Ref:  Stage
      Variables:
        Stage:
          Ref: Stage
        ApiLambdaFunction:
          Ref: EventsApiLambdaFunction
  EventsApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/py-build/
      Handler: pokequiz.events.lambda_handler
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn:
              Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsName}*
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue:
                Fn::Sub:
                  ${Stage}-quizdata-storage
      FunctionName:
        Fn::Sub: ${Stage}-${ServiceName}-events
      Events:
        Slack:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /slack/events
            Method: POST
  InteractiveApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/py-build/
      Handler: pokequiz.interactive.lambda_handler
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsName}*
      - DynamoDBCrudPolicy:
          TableName:
            Fn::ImportValue:
              Fn::Sub:
                ${Stage}-quizdata-storage
      FunctionName:
        Fn::Sub: ${Stage}-${ServiceName}-interactive
      Events:
        Slack:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /slack/interactive
            Method: POST
  OauthApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../dist/py-build/
      Handler: pokequiz.oauth.lambda_handler
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsName}*
      - DynamoDBCrudPolicy:
          TableName:
            Fn::ImportValue:
              Fn::Sub:
                ${Stage}-quizdata-storage
      FunctionName:
        Fn::Sub: ${Stage}-${ServiceName}-oauth
      Events:
        Slack:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: /slack/oauth
            Method: GET
  ApiLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: ${Stage}-${ServiceName}-lambda-role
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "AllowLambdaServiceToAssumeRole"
          Effect: "Allow"
          Action:
          - "sts:AssumeRole"
          Principal:
            Service:
            - "lambda.amazonaws.com"

Outputs:
  EventsApiUrl:
    Description: URL  of your API endpoint to put into the slack events
    Value: !Join
    - ''
    - - https://
      - Ref: ApiGatewayApi
      - '.execute-api.'
      - Ref: 'AWS::Region'
      - '.amazonaws.com/'
      - Ref: Stage
      - '/slack/events'
  InteractiveApiUrl:
    Description: URL of your API endpoint to put into the interactive slack
    Value: !Join
    - ''
    - - https://
      - Ref: ApiGatewayApi
      - '.execute-api.'
      - Ref: 'AWS::Region'
      - '.amazonaws.com/'
      - Ref: Stage
      - '/slack/interactive'
  OauthApiUrl:
    Description: URL of your API endpoint to put into the slack events
    Value: !Join
    - ''
    - - https://
      - Ref: ApiGatewayApi
      - '.execute-api.'
      - Ref: 'AWS::Region'
      - '.amazonaws.com/'
      - Ref: Stage
      - '/slack/oauth'
  ApiId:
    Description: The API Id
    Value:
      Ref: ApiGatewayApi
    Export:
      Name:
        Fn::Sub: ${Stage}-${ServiceName}-api