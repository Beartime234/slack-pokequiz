"""
Slack chat-bot Lambda handler.
"""

# Module Imports
import logging
import json
from slackclient import SlackClient

# Local imports
from pokequiz import helpers, messaging, SECRETS, QUIZ_ID, EVENTS_CONFIG

# Import the quiz
from pokequiz.quiz import Quiz

logger = logging.getLogger(__name__)


def lambda_handler(api_event, api_context):
    """Handle an incoming HTTP request from a Slack chat-bot.
    """
    logger.debug(f"Api Event: {api_event}")

    # Grab relevant information form the api_event
    slack_body_raw = api_event["body"]
    slack_body_dict = json.loads(slack_body_raw)
    request_headers = api_event["headers"]

    # If the stage is production make sure that we are receiving events from slack otherwise we don't care
    if not helpers.verify_request(request_headers, slack_body_raw, SECRETS["SIGNING_SECRET"]):
        return helpers.form_response(400, {"Error": "Bad Request Signature"})

    # This is to appease the slack challenge event that is sent
    # when subscribing to the slack event API. You can read more
    # here https://api.slack.com/events/url_verification
    if helpers.is_challenge(slack_body_dict):
        challenge_response_body = {
            "challenge": slack_body_dict["challenge"]
        }
        return helpers.form_response(200, challenge_response_body)

    # This parses the slack body dict to get the event JSON
    # this will hold information about the text and
    # the user who did it.
    slack_event_dict = slack_body_dict["event"]

    # Get the team ID for the slack channel
    team_id = slack_body_dict["team_id"]

    # Initialize the Quiz Object
    quiz = Quiz(QUIZ_ID, team_id)

    # Build the slack client. This allows us make slack API calls
    # read up on the python-slack-client here. We get this from
    # AWS secrets manager. https://github.com/slackapi/python-slackclient
    sc = SlackClient(quiz.get_bot_token())

    # We need to discriminate between events generated by 
    # the users, which we want to process and handle, 
    # and those generated by the bot or someone else's.
    if "bot_id" in slack_event_dict:
        logging.warning("Ignoring bot event")
    else:
        # Get the text of the message the user sent to the bot and lowercase it for easier comparison
        user_text = slack_event_dict["text"].lower()

        # Get the user id so we can reply to that user specifically
        user_id = slack_event_dict["user"]

        # Get the ID of the channel where the message was posted.
        channel_id = slack_event_dict["channel"]

        # The string values that must be in the user requested message to start the quiz or show leaderboard
        quiz_trigger_strings = EVENTS_CONFIG["trigger_words"]["quiz_start"]
        leaderboard_trigger_strings = EVENTS_CONFIG["trigger_words"]["leaderboard_show"]
        help_trigger_strings = EVENTS_CONFIG["trigger_words"]["help_show"]

        # This checks if the quiz start strings
        if any(x in user_text for x in quiz_trigger_strings):

            question = quiz.get_random_quiz_question()

            # Send the intro message to the quiz
            messaging.send_intro_message(
                slack_client=sc,
                channel_id=channel_id,
            )

            # Send the question
            messaging.send_question(
                slack_client=sc,
                channel_id=channel_id,
                question_attachment=quiz.form_suggest_question_slack_attachment(question)
            )
            quiz.update_user_score(user_id, True)

        elif any(x in user_text for x in leaderboard_trigger_strings):
            quiz = Quiz(QUIZ_ID, team_id)

            leaderboard: dict = quiz.get_leaderboard()
            leaderboard_text = quiz.form_leaderboard_text(leaderboard)

            messaging.send_leaderboard(
                slack_client=sc,
                channel_id=channel_id,
                leaderboard=leaderboard_text
            )
        elif any(x in user_text for x in help_trigger_strings):
            # Send the help message specified in the app config
            messaging.send_help_message(
                slack_client=sc,
                channel_id=channel_id,
                user_id=user_id
            )
        else:
            # Send a message saying we couldn't understand what they are trying to trigger
            messaging.send_unknown_command_response(
                slack_client=sc,
                channel_id=channel_id,
                user_id=user_id,
            )

    logger.info("Returning successful response.")
    # Everything went fine return a good response.
    return helpers.form_response(200)
